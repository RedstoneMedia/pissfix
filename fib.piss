# Works (should be 11)
test_eq(4 - 9 / 3 + 5 * 2, 11)
# Also works
test_eq((4 - (9 / 3)) + (5 * 2), 11)
# Also works
test_eq(4 - (9 / 3) + 5 * 2, 11)
# Should be -9
test_eq(4 - ((9 / 3) + 5 * 2), -9)
# Should be 0
test_eq(1+2*((4-5)*(4-5))-6/2, 0)
# Should be -1
test_eq(-1*(2+3)/5, -1)

fun map<T>(over: Sequence<T>, f: Lam<(T) -> T>) -> T {
    for i in 0..length(over) {
        v = over[i]
        over[i] = f(v)
    }
    over
}

# Should be Ifmmp!Xpsme"
test_eq(map("Hello World!", (c: Str) -> Str {
    char_code = str_to_chars(c)[0]
    char_to_str(char_code + 1)
}), "Ifmmp!Xpsme\"")

# Should be [3, 5, 7, 9, 11, 13]
test_eq(map([1, 1+1, 2+1, 2*2, 5, 6], (n: Int) -> Int {
    n * 2 + 1
}), [3, 5, 7, 9, 11, 13])

# Define test datastructures

struct CartCord {
    x: Flt,
    y: Flt
}

struct PolarCord {
    angle: Flt,
    radius: Flt,
    thingy: Arr<Arr<CartCord>>
}

enum Cord {
    CartCord: CartCord,
    PolarCord: PolarCord
}

# Test struct creation
polar_cord = PolarCord {
    radius: 12.0,
    thingy: [[CartCord {
            y: 12.0,
            x: 0.0
    }]],
    angle: 11.0
}

# and accessing
test_eq(polar_cord.angle, 11.0)
test_eq(polar_cord.radius, 12.0)
test_eq(polar_cord.thingy[1-1][1*2-2].x, 0.0)
test_eq(polar_cord.thingy[1-1][1*2-2].y, 12.0)

# Test polar to Cartesian conversion
fun to_cart_cord(polar_cord: PolarCord) -> CartCord {
    CartCord {
        x: polar_cord.radius * cos(polar_cord.angle),
        y: polar_cord.radius * sin(polar_cord.angle)
    }
}

converted_cord = to_cart_cord(polar_cord)
test_eq(round(converted_cord.x), 0)
test_eq(round(converted_cord.y), -12)

# Test struct property assignment (Non trivial in postfix, for nested structures)
polar_cord.radius = 13.0
polar_cord.thingy[0][0].x = 3.0
test_eq(polar_cord.radius, 13.0)
test_eq(polar_cord.thingy[0][0].x, 3.0)

cord = Cord:PolarCord(polar_cord) # TODO: Make it possible to do something with enums

test_eq(contains([3, 4, 7], 4), true)
test_eq(contains("Hello, World", "Hello"), true)

fun avg(s: Str) -> Flt {
    splits = split(s, "\\n")
    sum = 0.0
    for number_string in splits {
        sum += flt(number_string)
    }
    sum / flt(length(splits))
}

fun union_generic_stuff<T: Int | Str>(v: T) -> T {
    v
}

s = union_generic_stuff("Something") # s is now a string because the value passed to union_generic_stuff had a string type
s += "5"
test_eq(s, "Something5")

fun union_generic_stuff_arr<T: Str | Int | Flt>(v: Arr<T>) -> T {
    v[0] # TODO: Make it so that adding this `+ v[1]` will not crash everything
}

t = union_generic_stuff_arr([5, 12]) # t is now a string because the array passed to "union_generic_stuff_arr" had a inner string type
t += 8
test_eq(t, 13)

# Should be 830
test_eq(round(avg("849\\n814\\n906\\n800\\n791\\n807\\n841")), 830)

# Should set inner array value to 15
nested = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
nested[2][1] = 15
test_eq(nested[2][1], 15)

test_stats()

fun fibonacii(n: Int) -> Int {
    if n == 0 {
        0
    } else if n == 1 {
        1
    } else {
        last = 0
        current = 1
        # Do the loop
        for _ in 0..n {
            new_current = last + current
            last = current
            current = new_current
        }
        current
    }
}

fun factorial(n: Int) -> Int {
    product = 1
    while n != 0 {
        product *= n # This does the thing
        n -= 1
    }
    product
}

fact = factorial(read_int())
println("Input: " + str(fact))
println("Output: " + str(fibonacii(fact)))