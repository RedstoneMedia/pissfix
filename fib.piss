# Works (should be 11)
test_eq(4 - 9 / 3 + 5 * 2, 11)
# Also works
test_eq((4 - (9 / 3)) + (5 * 2), 11)
# Also works
test_eq(4 - (9 / 3) + 5 * 2, 11)
# Should be -9
test_eq(4 - ((9 / 3) + 5 * 2), -9)
# Should be 0
test_eq(1+2*((4-5)*(4-5))-6/2, 0)
# Should be -1
test_eq(-1*(2+3)/5, -1)

fun map(over: Obj, f: Lam) -> Obj {
    for i in 0..length(over) {
        v = over[i]
        over[i] = f(v)
    }
    over
}

# Should be Ifmmp!Xpsme"
test_eq(map("Hello World!", (c: Str) -> Str {
    char_code = str_to_chars(c)[0]
    char_to_str(char_code + 1)
}), "Ifmmp!Xpsme\"")
# Should be [3, 5, 7, 9, 11, 13]
test_eq(map([1, 1+1, 2+1, 2*2, 5, 6], (n: Int) -> Int {
    n * 2 + 1
}), [3, 5, 7, 9, 11, 13])
# Should set inner array value to 15
nested = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
nested[2][1] = 15
test_eq(nested[2][1], 15)

test_stats()

fun fibonacii(n: Int) -> Int {
    if n == 0 {
        0
    } else if n == 1 {
        1
    } else {
        last = 0
        current = 1
        # Do the loop
        for _ in 0..n {
            new_current = last + current
            last = current
            current = new_current
        }
        current
    }
}

fun factorial(n: Int) -> Int {
    product = 1
    while n != 0 {
        product *= n # This does the thing
        n -= 1
    }
    product
}

fact = factorial(read_int())
println("Input: " + str(fact))
println("Output: " + str(fibonacii(fact)))